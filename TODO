Moja koncepcja na schemat klas jest poniższa, zróbcie z tym co chcecie:

Animation - klasa:
  - czas animacji (animation_time)
  - funkcję-dystrybuantę, która charakteryzuje przebieg jednej klatki o dziedzinie [0..1] i zbiorze wartości [0..1], przy czym F(0) = 0 oraz F[1] = 1 i funkcja jest ciągła (przynajmniej w teorii). Jej wykres może wyglądać np. tak:

 ^
1|                                           ______________________
 |                                          ,
 |                                         /
 |                                        /
 |                                       |
 |                                       |
 |                                      |
 |                                      |
 |                                     |
 |                                    /
 |                                   /
 |                                  /
 |                                 /
 |                                /
 |                               /
0|__________________________..--'_________________________________,__\
                                                                  1  /

  - dla podanego czasu, jaki chcemy mieć (dt) zwraca wartość funkcji:
    arg = dt / animation_time;
    floor_arg = floor(arg);
    arg = arg - floor_arg;
    return F(arg) + floor(arg);
Jej ideą jest zwrócenie względnego przesunięcia - rotacji o jaki się obracają elementy w kwancie czasu (dt) w porównaniu do pełnego tiku zegara. Ta wartość jest dodawana do rotacji elementów. Funkcja F jest podawana do klasy jako wskaźnik. W ten sposób można stworzyć wiele "animacji" o żądanej nieliniowej charakterystyce - w końcu zegar tyka, a nie chodzi liniowo. Hmm... myślę, że ta funkcja dystrybuanta może mieć inny przbieg niż 0-->1 np. dla wahadła - to może być sinusoida.
Może mieć metodę cache_result(dt), która będzie wywoływana w world i potem tylko brać cached_result we wszystkich miejscach.
Idea jest również taka, że to będzie zajebiście tykać :P


ClockPart - dziedziczy z Model:
  - ma wskaźnik na animację i określony sposób jej wykorzystania (tu chyba są same rotacje, chyba, że zacznie Wam się coś przesuwać :)
  - zawiera przesunięcie, rotację etc. i umożliwia wygenerowanie z tych wartości macierzy M przed rysowaniem
Dzięki tej klasie można zrobić zębatki, wahadło, kotwicę etc. Bierze sobie z animacji o ile się przesuwa i zapisuje sobie.


Clock - zawiera ClockParts wraz z ich przesunięciami względem modelu. Dobrze zajrzeć jak to jest zrobione tu: https://github.com/alatar-/truck_opengl/blob/master/src/truck_part.cpp
in_transform jest inicjowany z pliku config.ini i tam można zapisać względne przesunięcie, które będzie aplikowane przez cały czas trwania programu.





GODZINA ZERO - w miejscu dwunastki, 24h zegar

na tylniej ścianie:
BECAUSE FUCK YOU - THAT'S WHY

Duży zegar - można wejść i pooglądać, ładny duży klucz do nakręcania -
jak w archetypowej zabawce żołnierza gwardii Królowej brytyjskiej





PRZEKŁADNIE
6
12
15
24
36
60

Wahadło
|
Anchor : 12
          |
          |
          |        sekundy
          6 : 15   |           - 1 : 2.5
          |    |   |
          |    |   |
          |    |   |
          |    6 : 12          - 1 : 2
          ^        |
         / \       |
Ciężarek-|-|       |
         |-|       |
         \_/       |
          |        |
 _ _ _ _ _|_ _     |
          |        |
          ^        |
         / \       |
        /   \      |
       /     \     |
       |     |     |
        \_^_/      |
Klucz do nakręcania|
                   |
                   |
                   |
     minuty        |
          |   36 : 6           - 1 : 6
          |    |
          |    |
          |    |
          60 : 6               - 1 : 10
          |
          |
          |
          6 : 24               - 1 : 4
               |
               |
               |
               6 : 36          - 1 : 6
                   |
                   |
                   |
                   godziny (24)



t = 0.1138f
r = 0.19612f
ząb = 0.10512f

A : 12 (0.0f, -6 * r - 3.5 * t, -0.5f)
     | d = t
     6     X(0.0f, -6 * r - 2.5 * t, -0.5f)
      : 
      15 (0.0f, -6 * r - 2.5 * t, 3.0f + z)
      | d = t
      6    X(0.0f, -6 * r - 1.5 * t, 3.0f + z)
     :
    12 (0.0f, -6 * r - 1.5 * t, 0.0f)
     | d = t
     6     X(0.0f, -6 * r - 0.5 * t, 0.0f)
      :                               :6 (11 * r + z, -r - 0.5 * t, 0.0f)
      3_______________________________6| X(10 * r + z - 0.5 * t, 0.0f, 0.0f)  d = 9 * r + z - t
      6 (r + 0.5 * t, 0.0f, 0.0f)      |
                                       |
                                       | d = 9 * r - 0.5 * t
                                       |
                                       |
_______|_______________________________:6 X(11 * r + z, 8 * r - t, 0.0f)
      60 (0.0f, 8 * r - t, 0.0f)
      | d = t
      6    X(0.0f, 8 * r, 0.0f)
       :                                        :6 (7 * r + z, 11 * r, 0.0f)
       2________________________________________6|   X(6 * r + z - 0.5 * t, 12 * r + 0.5 * t, 0.0f)   d = 5 * r + z - t
       4 (r + 0.5 * t, 12 * r + 0.5 * t, 0.0f)   |
                                                 |
                                                 | d = 7 * r + 0.5 * t
                                                 |
                                                 |
_______|________________________________________:6   X(7 * r + z, 18 * r + 0.5 * t, 0.0f)
        36 (0.0f, 18 * r + 0.5 * t, 0.0f)
